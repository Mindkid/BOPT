Element* buffer;
Element* workingPointer;
Element* savePointer;

int workingPage;
int savePage;

void update(int position, size_t size, void* value)
{
	
	Element* newElement = generateElement(size, value, &workingPointer);
	
	Element* oldElement = findChild(position);
	
	int fatherPosition = position - 1;
	Element* father = findChild(fatherPosition);
	
	saveToLog(fatherPosition, oldElement, workingPage);
	
	newElement->next = oldElement->next;
	father->next = newElement;
	
	if(page(newElement) < page(workingPointer))
		batchingTheFlushs(workingPointer);
}

void insertInPosition(int position, size_t size, void* value)
{
	Element* newElement = generateElement(size, value, &workingPointer);
	Element* oldElement = findChild(position);
	
	int fatherPosition = position - 1;
	Element* father = findChild(fatherPosition);
	
	saveToLog(fatherPosition, oldElement, workingPage);
	
	newElement->next = oldElement;
	father->next = newElement;
}

void remove(int position)
{
	Element toRemove = findChild(position)
	int fatherPosition = position - 1; 
	Element father = findChild(fatherPosition);
	
	saveToLog(fatherPosition, toRemove, workingPage);
	
	father->next = toRemove->next;
}


void batchingTheFlushs(Element* nextPointer)
{
  	Element* toUpdatePointer = savePointer;
  	  
    while(toUpdatePointer <= nextPointer)
    {
    	FLUSH(toUpdatePointer);
        toUpdatePointer += wordBytes;
    }
    
    savePage++;
    
    Log* entry = getEntries(savePage);
    
    while(entry != NULL)
    {
    	Element* father = findChild(entry->fatherPosition);
    	FLUSH(father->next);
    	entry = entry->next;
    }
    
    savePointer = toUpdatePointer;
    offsets[0] = savePointer - buffer;
    FLUSH(offsets);
}


void recover()
{
	if(savePointer < workingPointer)
	{
		int pageNumber = markedPage();
		recoverLog(pageNumber);
	}

}

void recoverLog(int pageNumber)
{
	Log* entry = getEntries(pageNumber);
	while(entry != NULL)
	{
		Element* father = findChild(entry->fatherPosition);
		father->next = entry->savedElement;
		FLUSH(father->next);
		entry = entry->next;	
	}
}

